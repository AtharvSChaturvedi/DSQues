//Double Linked List

#include <stdio.h>
#include <stdlib.h>

struct dnode {
    int data;
    struct dnode *next;
    struct dnode *prev;
};

struct dnode *start;

struct dnode* create_Dlist(struct dnode*);
struct dnode * insert_at_beg(struct dnode *,int data);
struct dnode * insert_at_end(struct dnode *,int data);
struct dnode *delete_from_start(struct dnode *);
struct dnode * delete_at_end(struct dnode *,int data); // To be updated
void display(struct dnode *);

int main() {
    int choice, d, n;
    while (1) {
        printf("\n1. Create\n");
        printf("2. Insert at start\n");
        printf("3. Insert at end\n");
        printf("4. Delete from beginning\n");
        printf("5. Delete a particular node\n");
        printf("6. Display\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter number of nodes: ");
                scanf("%d", &n);
                for (int i=0;i<n;i++) {
                    printf("Enter data: ");
                    scanf("%d", &d);
                    create_list(d);
                }
                break;

            case 2:
                printf("Enter the data to insert: ");
                scanf("%d", &d);
                insert_at_beg(start,d);
            break;

            case 4:
                start = delete_from_start(start);
                break;

            case 5:
                printf("Which data you want to delete: ");
                scanf("%d", &d);
                delete(start);
                break;

            case 6:
                display(start);
                break;

            default:
                printf("INVALID CHOICE");
        }
    }
}

void display(struct dnode *start) {
    struct dnode *temp=start;
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
}

struct dnode* create_Dlist(struct dnode*x) {
    struct dnode *temp = (struct dnode *)malloc(sizeof(struct dnode));
    temp->data = x;
    temp->next = NULL;
    temp->prev = NULL;
    struct dnode *ptr = start;
    if (start == NULL) {
        start = temp;
    } else {
        while (ptr->next != NULL) {
            ptr = ptr->next;
        }
        ptr->next = temp;
        temp->prev=ptr;
    }
}

struct dnode * insert_at_beg(struct dnode *x,int data){
    struct dnode *temp=(struct dnode*)malloc(sizeof(struct dnode));
    temp->prev=NULL;
    temp->data=data;
    temp->next=NULL;
    if(x==NULL){
        x=temp;
    }
    else {
        temp->next=start;
        x->prev=temp;
        x=temp;
    }
    return x;
}

struct dnode * insert_at_end(struct dnode *x,int data){
    
}

struct dnode *delete_from_start(struct dnode *start) {
    if (start == NULL) {
        return NULL; 
    }
    struct dnode *ptr = start;
    start = start->next;
    free(ptr);
    return start;
}



void delete(struct dnode *node) {
    if (node == NULL || node->next == NULL) {
        return;
    }

    struct dnode *temp = node->next;
    node->next = temp->next;
    if (temp->next != NULL) {
        temp->next->prev= node;
    }
    free(temp);
}
